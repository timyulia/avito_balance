// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	balance "balance"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBilling is a mock of Billing interface.
type MockBilling struct {
	ctrl     *gomock.Controller
	recorder *MockBillingMockRecorder
}

// MockBillingMockRecorder is the mock recorder for MockBilling.
type MockBillingMockRecorder struct {
	mock *MockBilling
}

// NewMockBilling creates a new mock instance.
func NewMockBilling(ctrl *gomock.Controller) *MockBilling {
	mock := &MockBilling{ctrl: ctrl}
	mock.recorder = &MockBillingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBilling) EXPECT() *MockBillingMockRecorder {
	return m.recorder
}

// AddMoney mocks base method.
func (m *MockBilling) AddMoney(account balance.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMoney", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMoney indicates an expected call of AddMoney.
func (mr *MockBillingMockRecorder) AddMoney(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMoney", reflect.TypeOf((*MockBilling)(nil).AddMoney), account)
}

// Dereserve mocks base method.
func (m *MockBilling) Dereserve(ord balance.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dereserve", ord)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dereserve indicates an expected call of Dereserve.
func (mr *MockBillingMockRecorder) Dereserve(ord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dereserve", reflect.TypeOf((*MockBilling)(nil).Dereserve), ord)
}

// GetBalance mocks base method.
func (m *MockBilling) GetBalance(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBillingMockRecorder) GetBalance(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBilling)(nil).GetBalance), id)
}

// Reserve mocks base method.
func (m *MockBilling) Reserve(ord balance.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", ord)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reserve indicates an expected call of Reserve.
func (mr *MockBillingMockRecorder) Reserve(ord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockBilling)(nil).Reserve), ord)
}

// WriteOff mocks base method.
func (m *MockBilling) WriteOff(ord balance.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOff", ord)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOff indicates an expected call of WriteOff.
func (mr *MockBillingMockRecorder) WriteOff(ord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOff", reflect.TypeOf((*MockBilling)(nil).WriteOff), ord)
}

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// GetHistory mocks base method.
func (m *MockInfo) GetHistory(id int, sort string, p *balance.Pagination) ([]balance.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", id, sort, p)
	ret0, _ := ret[0].([]balance.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockInfoMockRecorder) GetHistory(id, sort, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockInfo)(nil).GetHistory), id, sort, p)
}

// GiveName mocks base method.
func (m *MockInfo) GiveName(serv balance.Report) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveName", serv)
	ret0, _ := ret[0].(error)
	return ret0
}

// GiveName indicates an expected call of GiveName.
func (mr *MockInfoMockRecorder) GiveName(serv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveName", reflect.TypeOf((*MockInfo)(nil).GiveName), serv)
}

// MakeReport mocks base method.
func (m *MockInfo) MakeReport(year, month int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeReport", year, month)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeReport indicates an expected call of MakeReport.
func (mr *MockInfoMockRecorder) MakeReport(year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeReport", reflect.TypeOf((*MockInfo)(nil).MakeReport), year, month)
}
